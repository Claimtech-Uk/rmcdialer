// Updated schema.prisma with separated queue tables
// This will be the basis for the migration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// EXISTING MODELS (Preserved with Enhanced Relations)
// ============================================================================

model Agent {
  id                  Int                    @id @default(autoincrement())
  email               String                 @unique
  passwordHash        String                 @map("password_hash")
  firstName           String                 @map("first_name")
  lastName            String                 @map("last_name")
  role                String                 @default("agent")
  team                String                 @default("general")
  allowedQueues       Json                   @default("[\"unsigned_users\", \"outstanding_requests\"]") @map("allowed_queues")
  isActive            Boolean                @default(true) @map("is_active")
  isAiAgent           Boolean                @default(false) @map("is_ai_agent")
  twilioWorkerSid     String?                @map("twilio_worker_sid")
  createdAt           DateTime               @default(now()) @map("created_at")
  updatedAt           DateTime               @updatedAt @map("updated_at")
  
  // Existing relations (preserved during migration)
  sessions            AgentSession[]
  callOutcomes        CallOutcome[]
  assignedCalls       CallQueue[]            @relation("AssignedAgent")
  callSessions        CallSession[]
  callSessionOutcomes CallSession[]          @relation("CallSessionLastOutcome")
  callbacks           Callback[]
  callbackNotifications CallbackNotification[]
  primaryConversions  Conversion[]           @relation("PrimaryConversions")
  magicLinkActivities MagicLinkActivity[]
  shortUrls           ShortUrl[]
  smsConversations    SmsConversation[]
  autoDialerSettings  AutoDialerSettings?
  
  // New relations to separated queues
  assignedUnsignedCalls     UnsignedUsersQueue[]     @relation("UnsignedQueueAssignedAgent")
  assignedOutstandingCalls  OutstandingRequestsQueue[] @relation("OutstandingQueueAssignedAgent")

  @@map("agents")
}

model AgentSession {
  id                      String    @id @default(uuid()) @db.Uuid
  agentId                 Int       @map("agent_id")
  status                  String    @default("offline")
  currentCallSessionId    String?   @map("current_call_session_id") @db.Uuid
  loginAt                 DateTime  @default(now()) @map("login_at")
  logoutAt                DateTime? @map("logout_at")
  lastActivity            DateTime  @default(now()) @map("last_activity")
  callsCompletedToday     Int       @default(0) @map("calls_completed_today")
  totalTalkTimeSeconds    Int       @default(0) @map("total_talk_time_seconds")
  autoDialerActive        Boolean   @default(false) @map("auto_dialer_active")
  autoDialerQueueType     String?   @map("auto_dialer_queue_type")
  lastAutoCallAt          DateTime? @map("last_auto_call_at")
  callsCompletedInSession Int       @default(0) @map("calls_completed_in_session")
  agent                   Agent     @relation(fields: [agentId], references: [id])

  @@map("agent_sessions")
}

model UserCallScore {
  id                  String      @id @default(uuid()) @db.Uuid
  userId              BigInt      @unique @map("user_id")
  currentScore        Int         @default(0) @map("current_score")
  nextCallAfter       DateTime?   @map("next_call_after")
  lastCallAt          DateTime?   @map("last_call_at")
  totalAttempts       Int         @default(0) @map("total_attempts")
  successfulCalls     Int         @default(0) @map("successful_calls")
  lastOutcome         String?     @map("last_outcome")
  baseScore           Int         @default(0) @map("base_score")
  outcomePenaltyScore Int         @default(0) @map("outcome_penalty_score")
  timePenaltyScore    Int         @default(0) @map("time_penalty_score")
  isActive            Boolean     @default(true) @map("is_active")
  currentQueueType    String?     @map("current_queue_type")
  lastResetDate       DateTime?   @map("last_reset_date")
  lastQueueCheck      DateTime?   @map("last_queue_check")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  
  // Existing relations (preserved during migration)
  callQueue           CallQueue[]
  
  // New relations to separated queues
  unsignedQueueEntries      UnsignedUsersQueue[]     @relation("UnsignedQueueUserScore")
  outstandingQueueEntries   OutstandingRequestsQueue[] @relation("OutstandingQueueUserScore")

  @@index([nextCallAfter, currentScore])
  @@index([isActive, currentScore])
  @@index([currentQueueType, currentScore])
  @@map("user_call_scores")
}

// Preserve existing CallQueue model during migration
model CallQueue {
  id                String        @id @default(uuid()) @db.Uuid
  userId            BigInt        @map("user_id")
  claimId           BigInt?       @map("claim_id")
  queueType         String        @map("queue_type")
  priorityScore     Int           @default(0) @map("priority_score")
  queuePosition     Int?          @map("queue_position")
  status            String        @default("pending")
  queueReason       String?       @map("queue_reason")
  assignedToAgentId Int?          @map("assigned_to_agent_id")
  assignedAt        DateTime?     @map("assigned_at")
  callbackId        String?       @map("callback_id") @db.Uuid
  availableFrom     DateTime?     @map("available_from")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  assignedAgent     Agent?        @relation("AssignedAgent", fields: [assignedToAgentId], references: [id])
  callback          Callback?     @relation(fields: [callbackId], references: [id])
  userCallScore     UserCallScore @relation(fields: [userId], references: [userId])
  callSessions      CallSession[]

  @@index([status, priorityScore, createdAt])
  @@map("call_queue")
}

model CallSession {
  id                       String              @id @default(uuid()) @db.Uuid
  userId                   BigInt              @map("user_id")
  agentId                  Int                 @map("agent_id")
  
  // Original queue relation (preserved during migration)
  callQueueId              String?             @map("call_queue_id") @db.Uuid
  
  // New queue relations (one of these will be populated based on queue type)
  unsignedQueueId          String?             @map("unsigned_queue_id") @db.Uuid
  outstandingQueueId       String?             @map("outstanding_queue_id") @db.Uuid
  
  twilioCallSid            String?             @map("twilio_call_sid")
  status                   String              @default("initiated")
  direction                String              @default("outbound")
  startedAt                DateTime            @default(now()) @map("started_at")
  connectedAt              DateTime?           @map("connected_at")
  endedAt                  DateTime?           @map("ended_at")
  durationSeconds          Int?                @map("duration_seconds")
  talkTimeSeconds          Int?                @map("talk_time_seconds")
  userClaimsContext        Json?               @map("user_claims_context")
  createdAt                DateTime            @default(now()) @map("created_at")
  agentPerformanceScore    Int?                @map("agent_performance_score")
  callAttemptNumber        Int?                @map("call_attempt_number")
  callScore                Int?                @map("call_score")
  callSource               String?             @map("call_source")
  callbackScheduled        Boolean             @default(false) @map("callback_scheduled")
  followUpRequired         Boolean             @default(false) @map("follow_up_required")
  lastOutcomeAgentId       Int?                @map("last_outcome_agent_id")
  lastOutcomeAt            DateTime?           @map("last_outcome_at")
  lastOutcomeNotes         String?             @map("last_outcome_notes")
  lastOutcomeType          String?             @map("last_outcome_type")
  magicLinkSent            Boolean             @default(false) @map("magic_link_sent")
  queuePosition            Int?                @map("queue_position")
  scoreAdjustment          Int?                @map("score_adjustment")
  documentsRequested       Json?               @map("documents_requested")
  recordingDurationSeconds Int?                @map("recording_duration_seconds")
  recordingSid             String?             @map("recording_sid")
  recordingStatus          String?             @map("recording_status")
  recordingUrl             String?             @map("recording_url")
  saleMade                 Boolean             @default(false) @map("sale_made")
  sentimentScore           Decimal?            @map("sentiment_score") @db.Decimal(3, 2)
  smsSent                  Boolean             @default(false) @map("sms_sent")
  sourceQueueType          String?             @map("source_queue_type")
  transcriptStatus         String?             @map("transcript_status")
  transcriptSummary        String?             @map("transcript_summary")
  transcriptText           String?             @map("transcript_text")
  transcriptUrl            String?             @map("transcript_url")
  updatedAt                DateTime            @updatedAt @map("updated_at")
  userPriorityScore        Int?                @map("user_priority_score")
  
  // Existing relations (preserved during migration)
  callOutcomes             CallOutcome[]
  agent                    Agent               @relation(fields: [agentId], references: [id])
  callQueue                CallQueue?          @relation(fields: [callQueueId], references: [id])
  lastOutcomeAgent         Agent?              @relation("CallSessionLastOutcome", fields: [lastOutcomeAgentId], references: [id])
  magicLinkActivities      MagicLinkActivity[]
  
  // New relations to separated queues
  unsignedQueue            UnsignedUsersQueue?      @relation("UnsignedQueueCallSessions", fields: [unsignedQueueId], references: [id])
  outstandingQueue         OutstandingRequestsQueue? @relation("OutstandingQueueCallSessions", fields: [outstandingQueueId], references: [id])

  @@index([createdAt])
  @@index([userId])
  @@index([agentId])
  @@index([unsignedQueueId])
  @@index([outstandingQueueId])
  @@map("call_sessions")
}

model CallOutcome {
  id                 String      @id @default(uuid()) @db.Uuid
  callSessionId      String      @map("call_session_id") @db.Uuid
  outcomeType        String      @map("outcome_type")
  outcomeNotes       String?     @map("outcome_notes")
  nextCallDelayHours Int?        @map("next_call_delay_hours")
  scoreAdjustment    Int?        @map("score_adjustment")
  magicLinkSent      Boolean     @default(false) @map("magic_link_sent")
  smsSent            Boolean     @default(false) @map("sms_sent")
  documentsRequested Json?       @map("documents_requested")
  recordedByAgentId  Int         @map("recorded_by_agent_id")
  createdAt          DateTime    @default(now()) @map("created_at")
  callSession        CallSession @relation(fields: [callSessionId], references: [id])
  recordedByAgent    Agent       @relation(fields: [recordedByAgentId], references: [id])

  @@index([callSessionId])
  @@map("call_outcomes")
}

model Callback {
  id                     String                 @id @default(uuid()) @db.Uuid
  userId                 BigInt                 @map("user_id")
  scheduledFor           DateTime               @map("scheduled_for")
  callbackReason         String?                @map("callback_reason")
  preferredAgentId       Int?                   @map("preferred_agent_id")
  originalCallSessionId  String                 @map("original_call_session_id") @db.Uuid
  status                 String                 @default("pending")
  completedCallSessionId String?                @map("completed_call_session_id") @db.Uuid
  queueType              String                 @default("outstanding_requests") @map("queue_type")
  createdAt              DateTime               @default(now()) @map("created_at")
  
  // Existing relations (preserved during migration)
  callQueue              CallQueue[]
  preferredAgent         Agent?                 @relation(fields: [preferredAgentId], references: [id])
  notifications          CallbackNotification[]
  
  // New relations to separated queues
  unsignedQueueEntries      UnsignedUsersQueue[]     @relation("UnsignedQueueCallback")
  outstandingQueueEntries   OutstandingRequestsQueue[] @relation("OutstandingQueueCallback")

  @@index([scheduledFor])
  @@index([status])
  @@index([queueType, scheduledFor, status])
  @@map("callbacks")
}

model CallbackNotification {
  id               String   @id @default(uuid()) @db.Uuid
  callbackId       String   @map("callback_id") @db.Uuid
  agentId          Int?     @map("agent_id")
  notificationType String   @map("notification_type") // 'five_minute_reminder', 'immediate_queue', etc.
  status           String   @default("pending") // 'pending', 'sent', 'failed'
  sentAt           DateTime? @map("sent_at")
  errorMessage     String?  @map("error_message")
  createdAt        DateTime @default(now()) @map("created_at")
  callback         Callback @relation(fields: [callbackId], references: [id], onDelete: Cascade)
  agent            Agent?   @relation(fields: [agentId], references: [id])

  @@index([callbackId])
  @@index([agentId])
  @@index([notificationType])
  @@map("callback_notifications")
}

// ============================================================================
// NEW SEPARATED QUEUE TABLES
// ============================================================================

model UnsignedUsersQueue {
  id                    String   @id @default(uuid()) @db.Uuid
  userId                BigInt   @map("user_id")
  claimId               BigInt?  @map("claim_id")
  priorityScore         Int      @default(0) @map("priority_score")
  queuePosition         Int?     @map("queue_position")
  status                String   @default("pending")
  
  // 🎯 Signature-specific fields
  signatureMissingSince DateTime? @map("signature_missing_since")
  signatureType         String?   @map("signature_type")
  remindersSent         Int       @default(0) @map("reminders_sent")
  lastReminderAt        DateTime? @map("last_reminder_at")
  signatureBlockReason  String?   @map("signature_block_reason")
  urgentSignature       Boolean   @default(false) @map("urgent_signature")
  
  // Preserved CallQueue fields
  queueReason           String?   @map("queue_reason")
  assignedToAgentId     Int?      @map("assigned_to_agent_id")
  assignedAt            DateTime? @map("assigned_at")
  callbackId            String?   @map("callback_id") @db.Uuid
  availableFrom         DateTime? @map("available_from")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  // Relations
  assignedAgent         Agent?    @relation("UnsignedQueueAssignedAgent", fields: [assignedToAgentId], references: [id])
  callback              Callback? @relation("UnsignedQueueCallback", fields: [callbackId], references: [id])
  userCallScore         UserCallScore? @relation("UnsignedQueueUserScore", fields: [userId], references: [userId])
  callSessions          CallSession[] @relation("UnsignedQueueCallSessions")
  
  // Optimized indexes
  @@index([status, priorityScore, availableFrom], name: "idx_unsigned_priority")
  @@index([userId], name: "idx_unsigned_user")
  @@index([assignedToAgentId, status], name: "idx_unsigned_agent")
  @@index([signatureMissingSince, urgentSignature], name: "idx_unsigned_signature_urgency")
  @@index([remindersSent, lastReminderAt], name: "idx_unsigned_reminders")
  @@index([urgentSignature, status, priorityScore], name: "idx_unsigned_urgent_priority")
  
  @@unique([userId], name: "unique_user_unsigned")
  @@map("unsigned_users_queue")
}

model OutstandingRequestsQueue {
  id                    String   @id @default(uuid()) @db.Uuid
  userId                BigInt   @map("user_id")
  claimId               BigInt?  @map("claim_id")
  priorityScore         Int      @default(0) @map("priority_score")
  queuePosition         Int?     @map("queue_position")
  status                String   @default("pending")
  
  // 🎯 Requirements-specific fields
  requirementTypes      String[] @map("requirement_types")
  totalRequirements     Int      @default(0) @map("total_requirements")
  pendingRequirements   Int      @default(0) @map("pending_requirements")
  completedRequirements Int      @default(0) @map("completed_requirements")
  oldestRequirementDate DateTime? @map("oldest_requirement_date")
  followUpScheduled     DateTime? @map("follow_up_scheduled")
  requirementsPriority  String?   @map("requirements_priority")
  lastDocumentReceived  DateTime? @map("last_document_received")
  documentDeadline      DateTime? @map("document_deadline")
  escalationLevel       Int       @default(0) @map("escalation_level")
  
  // Preserved CallQueue fields
  queueReason           String?   @map("queue_reason")
  assignedToAgentId     Int?      @map("assigned_to_agent_id")
  assignedAt            DateTime? @map("assigned_at")
  callbackId            String?   @map("callback_id") @db.Uuid
  availableFrom         DateTime? @map("available_from")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  // Relations
  assignedAgent         Agent?    @relation("OutstandingQueueAssignedAgent", fields: [assignedToAgentId], references: [id])
  callback              Callback? @relation("OutstandingQueueCallback", fields: [callbackId], references: [id])
  userCallScore         UserCallScore? @relation("OutstandingQueueUserScore", fields: [userId], references: [userId])
  callSessions          CallSession[] @relation("OutstandingQueueCallSessions")
  
  // Optimized indexes
  @@index([status, priorityScore, availableFrom], name: "idx_outstanding_priority")
  @@index([userId], name: "idx_outstanding_user")
  @@index([assignedToAgentId, status], name: "idx_outstanding_agent")
  @@index([totalRequirements, pendingRequirements], name: "idx_outstanding_progress")
  @@index([oldestRequirementDate, escalationLevel], name: "idx_outstanding_urgency")
  @@index([requirementsPriority, followUpScheduled], name: "idx_outstanding_follow_up")
  @@index([documentDeadline, escalationLevel], name: "idx_outstanding_deadline")
  @@index([escalationLevel, status, priorityScore], name: "idx_outstanding_escalated_priority")
  
  @@unique([userId], name: "unique_user_outstanding")
  @@map("outstanding_requests_queue")
}

// ============================================================================
// OTHER EXISTING MODELS (Include stubs - actual models preserved from original)
// ============================================================================

// Note: Including minimal stubs here - the actual models from the original schema 
// (Conversion, MagicLinkActivity, ShortUrl, SmsConversation, AutoDialerSettings, etc.)
// will be preserved exactly as they are in the real migration.

model Conversion {
  id String @id @default(uuid()) @db.Uuid
  // ... other fields preserved from original
  primaryAgent Agent? @relation("PrimaryConversions", fields: [primaryAgentId], references: [id])
  primaryAgentId Int? @map("primary_agent_id")
  @@map("conversions")
}

model MagicLinkActivity {
  id String @id @default(uuid()) @db.Uuid
  // ... other fields preserved from original
  agent Agent @relation(fields: [agentId], references: [id])
  agentId Int @map("agent_id")
  callSession CallSession @relation(fields: [callSessionId], references: [id])
  callSessionId String @map("call_session_id") @db.Uuid
  @@map("magic_link_activities")
}

model ShortUrl {
  id String @id @default(uuid()) @db.Uuid
  // ... other fields preserved from original
  createdByAgent Agent @relation(fields: [createdByAgentId], references: [id])
  createdByAgentId Int @map("created_by_agent_id")
  @@map("short_urls")
}

model SmsConversation {
  id String @id @default(uuid()) @db.Uuid
  // ... other fields preserved from original
  assignedAgent Agent? @relation(fields: [assignedAgentId], references: [id])
  assignedAgentId Int? @map("assigned_agent_id")
  @@map("sms_conversations")
}

model AutoDialerSettings {
  id String @id @default(uuid()) @db.Uuid
  // ... other fields preserved from original
  agent Agent @relation(fields: [agentId], references: [id])
  agentId Int @unique @map("agent_id")
  @@map("auto_dialer_settings")
} 