generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  passwordHash        String              @map("password_hash")
  firstName           String              @map("first_name")
  lastName            String              @map("last_name")
  role                String              @default("agent")
  isActive            Boolean             @default(true) @map("is_active")
  isAiAgent           Boolean             @default(false) @map("is_ai_agent")
  twilioWorkerSid     String?             @map("twilio_worker_sid")
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  sessions            AgentSession[]
  callOutcomes        CallOutcome[]
  assignedCalls       CallQueue[]         @relation("AssignedAgent")
  callSessions        CallSession[]
  callSessionOutcomes CallSession[]       @relation("CallSessionLastOutcome")
  callbacks           Callback[]
  magicLinkActivities MagicLinkActivity[]
  shortUrls           ShortUrl[]
  smsConversations    SmsConversation[]

  @@map("agents")
}

model AgentSession {
  id                   String    @id @default(uuid()) @db.Uuid
  agentId              Int       @map("agent_id")
  status               String    @default("offline")
  currentCallSessionId String?   @map("current_call_session_id") @db.Uuid
  loginAt              DateTime  @default(now()) @map("login_at")
  logoutAt             DateTime? @map("logout_at")
  lastActivity         DateTime  @default(now()) @map("last_activity")
  callsCompletedToday  Int       @default(0) @map("calls_completed_today")
  totalTalkTimeSeconds Int       @default(0) @map("total_talk_time_seconds")
  agent                Agent     @relation(fields: [agentId], references: [id])

  @@map("agent_sessions")
}

model UserCallScore {
  id                  String      @id @default(uuid()) @db.Uuid
  userId              BigInt      @unique @map("user_id")
  currentScore        Int         @default(0) @map("current_score")
  nextCallAfter       DateTime?   @map("next_call_after")
  lastCallAt          DateTime?   @map("last_call_at")
  totalAttempts       Int         @default(0) @map("total_attempts")
  successfulCalls     Int         @default(0) @map("successful_calls")
  lastOutcome         String?     @map("last_outcome")
  baseScore           Int         @default(0) @map("base_score")
  outcomePenaltyScore Int         @default(0) @map("outcome_penalty_score")
  timePenaltyScore    Int         @default(0) @map("time_penalty_score")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  callQueue           CallQueue[]

  @@index([nextCallAfter, currentScore])
  @@map("user_call_scores")
}

model CallQueue {
  id                String        @id @default(uuid()) @db.Uuid
  userId            BigInt        @map("user_id")
  claimId           BigInt?       @map("claim_id")
  queueType         String        @map("queue_type")
  priorityScore     Int           @default(0) @map("priority_score")
  queuePosition     Int?          @map("queue_position")
  status            String        @default("pending")
  queueReason       String?       @map("queue_reason")
  assignedToAgentId Int?          @map("assigned_to_agent_id")
  assignedAt        DateTime?     @map("assigned_at")
  callbackId        String?       @map("callback_id") @db.Uuid
  availableFrom     DateTime?     @map("available_from")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  assignedAgent     Agent?        @relation("AssignedAgent", fields: [assignedToAgentId], references: [id])
  callback          Callback?     @relation(fields: [callbackId], references: [id])
  userCallScore     UserCallScore @relation(fields: [userId], references: [userId])
  callSessions      CallSession[]

  @@index([status, priorityScore, createdAt])
  @@map("call_queue")
}

model CallSession {
  id                       String              @id @default(uuid()) @db.Uuid
  userId                   BigInt              @map("user_id")
  agentId                  Int                 @map("agent_id")
  callQueueId              String              @map("call_queue_id") @db.Uuid
  twilioCallSid            String?             @map("twilio_call_sid")
  status                   String              @default("initiated")
  direction                String              @default("outbound")
  startedAt                DateTime            @default(now()) @map("started_at")
  connectedAt              DateTime?           @map("connected_at")
  endedAt                  DateTime?           @map("ended_at")
  durationSeconds          Int?                @map("duration_seconds")
  talkTimeSeconds          Int?                @map("talk_time_seconds")
  userClaimsContext        Json?               @map("user_claims_context")
  createdAt                DateTime            @default(now()) @map("created_at")
  agentPerformanceScore    Int?                @map("agent_performance_score")
  callAttemptNumber        Int?                @map("call_attempt_number")
  callScore                Int?                @map("call_score")
  callSource               String?             @map("call_source")
  callbackScheduled        Boolean             @default(false) @map("callback_scheduled")
  followUpRequired         Boolean             @default(false) @map("follow_up_required")
  lastOutcomeAgentId       Int?                @map("last_outcome_agent_id")
  lastOutcomeAt            DateTime?           @map("last_outcome_at")
  lastOutcomeNotes         String?             @map("last_outcome_notes")
  lastOutcomeType          String?             @map("last_outcome_type")
  magicLinkSent            Boolean             @default(false) @map("magic_link_sent")
  queuePosition            Int?                @map("queue_position")
  scoreAdjustment          Int?                @map("score_adjustment")
  documentsRequested       Json?               @map("documents_requested")
  recordingDurationSeconds Int?                @map("recording_duration_seconds")
  recordingSid             String?             @map("recording_sid")
  recordingStatus          String?             @map("recording_status")
  recordingUrl             String?             @map("recording_url")
  saleMade                 Boolean             @default(false) @map("sale_made")
  sentimentScore           Decimal?            @map("sentiment_score") @db.Decimal(3, 2)
  smsSent                  Boolean             @default(false) @map("sms_sent")
  sourceQueueType          String?             @map("source_queue_type")
  transcriptStatus         String?             @map("transcript_status")
  transcriptSummary        String?             @map("transcript_summary")
  transcriptText           String?             @map("transcript_text")
  transcriptUrl            String?             @map("transcript_url")
  updatedAt                DateTime            @updatedAt @map("updated_at")
  userPriorityScore        Int?                @map("user_priority_score")
  callOutcomes             CallOutcome[]
  agent                    Agent               @relation(fields: [agentId], references: [id])
  callQueue                CallQueue           @relation(fields: [callQueueId], references: [id])
  lastOutcomeAgent         Agent?              @relation("CallSessionLastOutcome", fields: [lastOutcomeAgentId], references: [id])
  magicLinkActivities      MagicLinkActivity[]

  @@index([createdAt])
  @@index([userId])
  @@index([agentId])
  @@map("call_sessions")
}

model CallOutcome {
  id                 String      @id @default(uuid()) @db.Uuid
  callSessionId      String      @map("call_session_id") @db.Uuid
  outcomeType        String      @map("outcome_type")
  outcomeNotes       String?     @map("outcome_notes")
  scoreAdjustment    Int?        @map("score_adjustment")
  magicLinkSent      Boolean     @default(false) @map("magic_link_sent")
  smsSent            Boolean     @default(false) @map("sms_sent")
  documentsRequested Json?       @map("documents_requested")
  recordedByAgentId  Int         @map("recorded_by_agent_id")
  createdAt          DateTime    @default(now()) @map("created_at")
  callSession        CallSession @relation(fields: [callSessionId], references: [id])
  recordedByAgent    Agent       @relation(fields: [recordedByAgentId], references: [id])

  @@index([callSessionId])
  @@map("call_outcomes")
}

model Callback {
  id                     String      @id @default(uuid()) @db.Uuid
  userId                 BigInt      @map("user_id")
  scheduledFor           DateTime    @map("scheduled_for")
  callbackReason         String?     @map("callback_reason")
  preferredAgentId       Int?        @map("preferred_agent_id")
  originalCallSessionId  String      @map("original_call_session_id") @db.Uuid
  status                 String      @default("pending")
  completedCallSessionId String?     @map("completed_call_session_id") @db.Uuid
  createdAt              DateTime    @default(now()) @map("created_at")
  callQueue              CallQueue[]
  preferredAgent         Agent?      @relation(fields: [preferredAgentId], references: [id])

  @@index([scheduledFor])
  @@index([status])
  @@map("callbacks")
}

model MagicLinkActivity {
  id               String       @id @default(uuid()) @db.Uuid
  userId           BigInt       @map("user_id")
  linkType         String       @map("link_type")
  linkToken        String       @map("link_token")
  sentVia          String       @map("sent_via")
  sentByAgentId    Int          @map("sent_by_agent_id")
  sentAt           DateTime     @default(now()) @map("sent_at")
  accessedAt       DateTime?    @map("accessed_at")
  callSessionId    String?      @map("call_session_id") @db.Uuid
  expiresAt        DateTime?    @map("expires_at")
  isActive         Boolean      @default(true) @map("is_active")
  accessCount      Int          @default(0) @map("access_count")
  expiredAt        DateTime?    @map("expired_at")
  expiredReason    String?      @map("expired_reason")
  userAgent        String?      @map("user_agent")
  ipAddress        String?      @map("ip_address")
  twilioMessageSid String?      @map("twilio_message_sid")
  callSession      CallSession? @relation(fields: [callSessionId], references: [id])
  sentByAgent      Agent        @relation(fields: [sentByAgentId], references: [id])

  @@index([linkToken])
  @@index([isActive, expiresAt])
  @@index([userId])
  @@map("magic_link_activities")
}

model ShortUrl {
  id               String    @id @default(cuid())
  originalUrl      String    @map("original_url")
  shortCode        String    @unique @map("short_code")
  accessCount      Int       @default(0) @map("access_count")
  lastAccessedAt   DateTime? @map("last_accessed_at")
  expiresAt        DateTime? @map("expires_at")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  createdByAgentId Int?      @map("created_by_agent_id")
  createdByAgent   Agent?    @relation(fields: [createdByAgentId], references: [id])

  @@index([shortCode])
  @@index([isActive, expiresAt])
  @@map("short_urls")
}

model SmsConversation {
  id                String       @id @default(uuid()) @db.Uuid
  userId            BigInt?      @map("user_id")
  phoneNumber       String       @map("phone_number")
  status            String       @default("active")
  lastMessageAt     DateTime     @default(now()) @map("last_message_at")
  assignedAgentId   Int?         @map("assigned_agent_id")
  priority          String       @default("normal") @map("priority")
  unreadCount       Int          @default(0) @map("unread_count")
  lastAgentResponse DateTime?    @map("last_agent_response")
  createdAt         DateTime     @default(now()) @map("created_at")
  assignedAgent     Agent?       @relation(fields: [assignedAgentId], references: [id])
  messages          SmsMessage[]

  @@index([status, lastMessageAt])
  @@index([phoneNumber])
  @@map("sms_conversations")
}

model SmsMessage {
  id               String          @id @default(uuid()) @db.Uuid
  conversationId   String          @map("conversation_id") @db.Uuid
  direction        String          @map("direction")
  body             String          @map("body")
  twilioMessageSid String?         @map("twilio_message_sid")
  isAutoResponse   Boolean         @default(false) @map("is_auto_response")
  sentAt           DateTime?       @map("sent_at")
  receivedAt       DateTime?       @map("received_at")
  createdAt        DateTime        @default(now()) @map("created_at")
  messageType      String?         @map("message_type")
  conversation     SmsConversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId, createdAt])
  @@map("sms_messages")
}
